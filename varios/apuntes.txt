funcion lambda 
palabra reservada lambda, parametros pueden ser mas de uno y por omision y valores de retorno
<nombre>=lambda <parametros de llegada> : <return>
raiz = lambda a,b:a**(1/b)
donde a es el numero que quiero calcular la raiz y b es el indice 
valor por omision 
raiz = lambda a,b=2:a**(1/b) de la misma forma que con funciones normales

------------------------------------------------------------------------------------------------------------------------------------

metodos nuevos para listas:

extend; sintaxis: lista1.extend(lista2) 

isnert; inserta un elemento en una posicion especifica de la lista. sintaxis: lista.insert(<posicion>,<dato>)

remove; elimina el primer elemento que encuentre con un valor especificado. lista.remove(<elemento)  

pop; elimina elemento por posicion especificada (indice). sintaxis; lista.pop(elemento); elemento = lista.pop(elemento) lo borras y lo guardas. si no le pasas nada borra el ultimo

in;te dice si esta el elemento (true or false(en una lista)) 

index; devuelve la posicion donde se encuentra el elemento, busca por contenido y devuelve pos. sintaxis; lista.index(elemento)

count; devuelve el numero de veces que aparece un elemento en la lista; cuenta = lista.count(elemento) 

sort; ordena la lista de forma ascendente. lista.sort(). lista.sort(reverse=True) -> descendente
-> para no perder consistencia entre listas paralelas
-> paquete = list(zip(lista_1, lista_2, lista_3)) 
-> paquete.sort(key=lambda x: x[i]) 

reverse; invierte la lista. sintaxis; lista.reverse()

copy; copias la lista asi como te digo chango; lista2= lista1.copy(). genera listas independientes

variable = sorted lista, key=lambda x: x[1]

zip; empaquetar listas en una tupla

----------------------------------------------------------------------------------------------------------------------------------------

CORTES O REBANADAS DE LISTAS 

operador nuevo = ":" 
[start:stop:step], el valor por omision de step es 1 
el stop es el anterior, osea, si el slice es de [2:7]
va a empezar desde 2 -> 6 
el slicing me da una nueva lista por resultado 
el paso suma posiciones 
el valor por omision de inicio es 0
el valor por omision de fin es el len de la lista
el corte es uno antes del valor de stop 
*como hago para invertir una lista por la tecnica de rebanado 
*[::-1]

----------------------------------------------------------------------------------------------------------------------------------------------

MODIFICAR VALORES DE LISTA -> CON REBANADAS

L[1:4] = [1,2,3] -> modifica los valores de la lista entre las posiciones, si te pasas de valores alarga la lista 
[1:1] abre un hueco en la lista, no reemplaza nada
[1:2] reemplaza la posicion de 1  
L2 = L1[:] COPIAS TODA LA LISTA 

------------------------------------------------------- -------------------------------------------------------------------------------------

LISTAS POR COMPRENSION 

L = [X**2 for X in range (5)]
l = [elemento (lista, variable, operacion) for i in range(x)]
l = [elemento for elemento in lista if elemento >= 0] --> FILTRO 
condicional dentro de la lista puede contener tanto if como else 


----------------------------------------------------------------------------------------------------
segunda parte de la materia 

-> instruccion break, continue 
-> clausula else 
-> while true 
-> intruccion pass

formas de romper un bucle (while o for) -> continue, break 

continue: rompe la iteracion en curso, no rompe el ciclo, pasa a la siguiente iteracion, 
sirve tanto para for como para while.

IMPORTANTE -> si tengo que romper un ciclo for deberia haber usado un ciclo while

break: finaliza el ciclo completo 

//////////////////////////////////////////////////////////

FOR - WHILE - ELSE -> PUEDEN TENER ASOCIADO UN ELSE, TODO LO QUE ESTE EN EL ELSE SE VA A EJECUTAR SI EL CICLO SE FINALIZA DE MANERA NORMAL 

ES DECIR, EL ELSE SE VA A EJECUTAR SI EL CICLO TERMINA DE FORMA NATURAL 

SI EL BUCLE SE ROMPE CON UN BREAK NO SE EJECUTA 

TE AHORRAS UN TREMENDO CHOCLO USANDO EL ELSE 

CON EL CONTINUE HAY QUE PROBAR 

/////////////////////////////////////////////////////////////////

while true, ciclo infinito a menos que exista una condicion que rompa el bucle 

BUENA PRACTICA: NO FUERCES HACER COSAS QUE NO TIENEN SENTIDO 


//////////////////////////////////////////////////////////////////

try: bloque protegido, dentro de este bloque van las instrucciones con potenciales errores 

las excepciones en python estan agrupadas por jerarquia 

hay excepciones genericas 

excepciones comunes:
IndexError
NameError
ValueError
ZeroDivisionError
SyntaxError
IdentationError
TypeError
AtributeError

otras: 
AssertionError
IdentationError
KeyError
KeyboardInterrupt
MemoryError
ModuleNotFoundError
RecursionError

Se ejecuta primero el bloque protegido.
Si se produce algún error durante la ejecución del 
mismo, se pasa automáticamente al bloque except que 
corresponda a la excepción generada.
Si no se produce ningún error, el bloque except es 
ignorado.
El bloque try-except puede tener tantos except como 
sea necesario, sin repetir ningún tipo de excepción.

el except puede no estar seguido de un tipo de excepcion, en cuyo caso capturara cualquier excepcion generada

es posible capturar el mensaje de error asociado a la excepcion con la instruccion as 


TRY EXCEPT ELSE 

se puede poner un else despues del except, solo se va a ejecutar si no se lanzo la excepcion

FINALLY se pone al final para ejecutar codigo sin importar si sale o no la excepcion

-----------------

raise: fuerza la ejecucion de una interrupcion 

esta instruccion RAISE tambien puede utilizarse para relanzar la ultima excepcion producida 

intruccion assert: evalua una condicion, si da verdadero, no levanta ninguna excepcion, si da false levanta una excepcion del tipo AssertionError
alternativa al if para hacer una comparacion que termine con un true or false

EXCEPCIONES 

1. **IndexError**: Ocurre cuando se intenta acceder a un índice fuera del rango en una lista o secuencia.
   
2. **NameError**: Aparece cuando se intenta usar una variable o función que no ha sido definida.
   
3. **ValueError**: Se lanza cuando una función recibe un argumento con el tipo correcto pero con un valor inapropiado.
   
4. **ZeroDivisionError**: Ocurre cuando se intenta dividir un número por cero.
   
5. **SyntaxError**: Surge cuando el código contiene errores de sintaxis que impiden su compilación.
   
6. **IndentationError**: Se lanza cuando el código tiene problemas de indentación, lo que afecta la estructura.
   
7. **TypeError**: Aparece cuando una operación se realiza sobre tipos incompatibles.
   
8. **AttributeError**: Se produce cuando se intenta acceder a un atributo o método que no existe en un objeto.
   
9. **AssertionError**: Ocurre cuando una declaración `assert` falla porque su condición evaluada es falsa.
   
10. **IOError**: Se lanza cuando ocurre un error de entrada/salida, como la lectura o escritura de un archivo fallida.
   
11. **KeyError**: Aparece cuando se intenta acceder a una clave inexistente en un diccionario.
   
12. **KeyboardInterrupt**: Se lanza cuando el usuario interrumpe la ejecución de un programa (generalmente con Ctrl+C).
   
13. **MemoryError**: Ocurre cuando el programa no puede asignar más memoria.
   
14. **ModuleNotFoundError**: Se lanza cuando se intenta importar un módulo que no puede ser encontrado.
   
15. **RecursionError**: Ocurre cuando se excede el límite de recursión máxima permitido por el intérprete de Python.


        CHATGPT BASANDO EXCEPCIONES: 

El manejo de excepciones debe centrarse en:

1. Previsión de excepciones comunes: Es fundamental cubrir las excepciones que sabes que pueden ocurrir, 
como errores de E/S (entrada/salida), de red, o errores de tipo al trabajar con datos.

2. Evitar excepciones generales: Utilizar un bloque except Exception para capturar todas las excepciones
es una mala práctica si no se maneja adecuadamente,
ya que puede ocultar errores que no habías previsto. Es mejor ser específico.

3. No atrapar excepciones que no puedas manejar: Solo captura las excepciones que tienes un plan para manejar. 
Si no puedes recuperar el estado del programa tras una excepción, 
es mejor dejar que el error sea lanzado.

4. Validación y prevención: Muchas excepciones se pueden evitar con una correcta validación de datos
antes de ejecutar operaciones arriesgadas, lo que reduce la necesidad de manejar excepciones.

5. Registro de errores: En caso de excepciones inesperadas, 
es útil registrarlas para que puedas revisarlas y mejorarlas en el futuro

El objetivo es anticipar y manejar los errores más probables y críticos, sin atrapar indiscriminadamente todas las excepciones.

--------------------------------------------------------------------------------------------------------------------------------------------------------
  
        PYTHON ZEN

    Bello es mejor que feo.
    Explícito es mejor que implícito.
    Simple es mejor que complejo.
    Complejo es mejor que complicado.
    Plano es mejor que anidado.
    Espaciado es mejor que denso.
    La legibilidad es importante.
    Los casos especiales no son lo suficientemente especiales como
    para romper las reglas.

--------------------------------------------------------------------------------------------------------------------
ARCHIVOS 

cada linea de texto en un archivo de texto plano (sin formato) es un 'REGISTRO'

APERTURA
TODO ARCHIVO DEBE SER ABIERTO PREVIO A SER UTILIZADO
<variable> = open(file, mode='r')
arch = open(“datos.txt”)
arch = open(“datos.txt”, mode=‘rt’)
arch = open(“c:\\nuevo\\datos.txt”, mode=‘rt’)
arch = open(r“c:\nuevo\datos.txt”, mode=‘rt’)

mode: indica el modo de apertura del archivo, por
default es modo lectura de un archivo de texto
Primer Caracter:
w: escritura
r: lectura
Segundo Caracter:
t: texto
b: binario

Si no se logra abrir el archivo produce un error del
tipo IOError

CIERRE
TODO ARCHIVO SE DEBE CERRAR, se suele utilizar
En finally para asegurar su ejecución
<arch>.close()

PROCESO: escritura
Realizar grabaciones sobre el archivo.
El salto de línea se debe agregar a la cadena
<arch>.write(<cadena>)
Graba la <cadena> en el archivo.
SE DEBE AGREGAR EL SALTO DE LINEA

modo lectura: abre el archivo en modo entrada 

modo escritura: abre el archivo en modo salida, si el archivo no existe lo va a crear, si ya existe, lo destruye y sobrescribe

modo append: abre el archivo en modo salida, si el archivo no existe lo crea, si ya existe, agrega registros al final del archivo 

